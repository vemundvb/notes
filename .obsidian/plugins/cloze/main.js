/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ClozePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// lang/en.ts
var langs = {
  add_cloze: "Add cloze",
  remove_cloze: "Remove cloze",
  toggle_cloze: "Toggle all clozes",
  setting_hide_by_default: "Hide by default",
  setting_hide_by_default_desc: "Enable this setting, all clozes will be hidden by default when reading the page. \u{1F648}",
  setting_auto_convert: "Auto Convert",
  setting_highlight: "Highlighted text",
  setting_highlight_desc: "Enable this setting, all ==highlighted texts== will be converted to cloze.",
  setting_bold: "Bolded text",
  setting_bold_desc: "Enable this setting, all **bolded texts** will be converted to cloze.",
  setting_underline: "Underlined text",
  setting_underline_desc: "Enable this setting, all <u>underlined texts</u> will be converted to cloze.",
  setting_contact: "Thank you for using Cloze! Any reply is welcomed"
};
var en_default = langs;

// lang/zh.ts
var langs2 = {
  add_cloze: "\u6DFB\u52A0\u586B\u7A7A",
  remove_cloze: "\u79FB\u9664\u586B\u7A7A",
  toggle_cloze: "\u663E/\u9690\u6240\u6709\u586B\u7A7A",
  setting_hide_by_default: "\u9ED8\u8BA4\u9690\u85CF",
  setting_hide_by_default_desc: "\u542F\u7528\u6B64\u8BBE\u7F6E\u540E\uFF0C\u6253\u5F00\u9875\u9762\u65F6\u6240\u6709\u586B\u7A7A\u5185\u5BB9\u5C06\u9ED8\u8BA4\u9690\u85CF\u3002\u{1F648}",
  setting_auto_convert: "\u81EA\u52A8\u8F6C\u6362",
  setting_highlight: "\u9AD8\u4EAE\u6587\u5B57",
  setting_highlight_desc: "\u542F\u7528\u6B64\u8BBE\u7F6E\u540E\uFF0C\u6240\u6709==\u9AD8\u4EAE\u6587\u5B57==\u4E5F\u5C06\u8F6C\u6362\u4E3A\u586B\u7A7A\u3002",
  setting_bold: "\u7C97\u4F53\u6587\u5B57",
  setting_bold_desc: "\u542F\u7528\u6B64\u8BBE\u7F6E\u540E\uFF0C\u6240\u6709**\u7C97\u4F53\u6587\u5B57**\u4E5F\u5C06\u8F6C\u6362\u4E3A\u586B\u7A7A\u3002",
  setting_underline: "\u4E0B\u5212\u7EBF\u6587\u5B57",
  setting_underline_desc: "\u542F\u7528\u6B64\u8BBE\u7F6E\u540E\uFF0C\u6240\u6709<u>\u4E0B\u5212\u7EBF\u6587\u5B57</u>\u4E5F\u5C06\u8F6C\u6362\u4E3A\u586B\u7A7A\u3002",
  setting_contact: "\u8C22\u8C22\u4F60\u7684\u4F7F\u7528~ \u6B22\u8FCE\u53CD\u9988\uFF01\u6233\u8FD9\u91CC\uFF1A"
};
var zh_default = langs2;

// lang/index.ts
var langs3 = {
  en: en_default,
  zh: zh_default
};
var language = window.localStorage.getItem("language") || "en";
var lang_default = langs3[language] || en_default;

// main.ts
var DEFAULT_SETTINGS = {
  defaultHide: true,
  includeHighlighted: false,
  includeUnderlined: false,
  includeBolded: false
};
var ClozePlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.isAllHide = true;
    this.clozeSelector = () => {
      const selectors = [".cloze .cloze-span"];
      if (this.settings.includeHighlighted) {
        selectors.push(".cloze mark");
      }
      if (this.settings.includeUnderlined) {
        selectors.push(".cloze u");
      }
      if (this.settings.includeBolded) {
        selectors.push(".cloze strong");
      }
      return selectors.join(", ");
    };
    this.hideClozeContent = (target) => {
      target.setAttribute("data-mark-hide", "true");
    };
    this.showClozeContent = (target) => {
      target.removeAttribute("data-mark-hide");
    };
    this.addCloze = (editor) => {
      const currentStr = editor.getSelection();
      const newStr = currentStr.replace(/<span class="cloze-span">(.*?)<\/span>/g, "$1");
      editor.replaceSelection(`<span class="cloze-span">${newStr}</span>`);
      editor.blur();
    };
    this.removeCloze = (editor) => {
      const currentStr = editor.getSelection();
      const newStr = currentStr.replace(/<span class="cloze-span">(.*?)<\/span>/g, "$1");
      editor.replaceSelection(newStr);
    };
  }
  async onload() {
    console.log("load cloze plugin");
    await this.loadSettings();
    this.addRibbonIcon("fish", lang_default.toggle_cloze, (evt) => {
      this.toggleAllHide(document, !this.isAllHide);
      this.isAllHide = !this.isAllHide;
    });
    this.addSettingTab(new SettingTab(this.app, this));
    this.registerDomEvent(document, "click", (event) => {
      this.toggleHide(event.target);
    });
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor) => {
        const selection = editor.getSelection();
        if (selection) {
          menu.addItem((item) => {
            item.setTitle(lang_default.add_cloze).onClick((e) => {
              this.addCloze(editor);
            });
          });
          menu.addItem((item) => {
            item.setTitle(lang_default.remove_cloze).onClick((e) => {
              this.removeCloze(editor);
            });
          });
        }
      })
    );
    this.addCommand({
      id: "add-cloze",
      name: lang_default.add_cloze,
      icon: "fish",
      editorCallback: (editor, context) => {
        this.addCloze(editor);
      }
    });
    this.addCommand({
      id: "remove-cloze",
      name: lang_default.remove_cloze,
      icon: "fish-off",
      editorCallback: async (editor) => {
        this.removeCloze(editor);
      }
    });
    this.registerMarkdownPostProcessor((element, context) => {
      element.classList.add("cloze");
      this.toggleAllHide(element, this.isAllHide);
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    this.isAllHide = this.settings.defaultHide;
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.isAllHide = this.settings.defaultHide;
  }
  toggleHide(target) {
    if (target.matches(this.clozeSelector())) {
      if (target.getAttribute("data-mark-hide")) {
        this.showClozeContent(target);
      } else {
        this.hideClozeContent(target);
      }
    }
  }
  toggleAllHide(dom = document, hide) {
    const marks = dom.querySelectorAll(this.clozeSelector());
    if (hide) {
      marks.forEach((mark) => {
        this.hideClozeContent(mark);
      });
    } else {
      marks.forEach((mark) => {
        this.showClozeContent(mark);
      });
    }
  }
};
var SettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Cloze" });
    new import_obsidian.Setting(containerEl).setName(lang_default.setting_hide_by_default).setDesc(lang_default.setting_hide_by_default_desc).addToggle((toggle) => toggle.setValue(this.plugin.settings.defaultHide).onChange((value) => {
      this.plugin.settings.defaultHide = value;
      this.plugin.saveSettings();
    }));
    containerEl.createEl("h2", { text: lang_default.setting_auto_convert });
    new import_obsidian.Setting(containerEl).setName(lang_default.setting_highlight).setDesc(lang_default.setting_highlight_desc).addToggle((toggle) => toggle.setValue(this.plugin.settings.includeHighlighted).onChange((value) => {
      this.plugin.settings.includeHighlighted = value;
      this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName(lang_default.setting_bold).setDesc(lang_default.setting_bold_desc).addToggle((toggle) => toggle.setValue(this.plugin.settings.includeBolded).onChange((value) => {
      this.plugin.settings.includeBolded = value;
      this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName(lang_default.setting_underline).setDesc(lang_default.setting_underline_desc).addToggle((toggle) => toggle.setValue(this.plugin.settings.includeUnderlined).onChange((value) => {
      this.plugin.settings.includeUnderlined = value;
      this.plugin.saveSettings();
    }));
    containerEl.createEl("p", {
      text: lang_default.setting_contact + " ",
      cls: "setting-item-description"
    }).createEl("a", {
      text: "here",
      href: "https://github.com/DearVikki/obsidian-cloze-plugin/issues"
    });
  }
};
